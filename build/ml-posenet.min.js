(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):global.mlPosenet=factory()})(this,function(){"use strict";var mlPosenet=mlPosenet||{};mlPosenet.Parameters={};var Parameters=mlPosenet.Parameters;mlPosenet.Parameters.Sample={algorithm:"single-pose",input:{mobileNetArchitecture:"0.50",outputStride:16,imageScaleFactor:.5},singlePoseDetection:{minPoseConfidence:.1,minPartConfidence:.5},multiPoseDetection:{maxPoseDetections:2,minPoseConfidence:.1,minPartConfidence:.3,nmsRadius:20},output:{showVideo:true,showSkeleton:true,showPoints:true},net:null};var mlPosenet$1=mlPosenet$1||{};mlPosenet$1.Utils=function(){async function estimatePoses(sourceEl,net,parameters,flipHorizontal){if(flipHorizontal===undefined){flipHorizontal=sourceEl instanceof HTMLVideoElement?true:false}switch(parameters.algorithm){case"single-pose":const pose=await net.estimateSinglePose(sourceEl,+parameters.input.imageScaleFactor,flipHorizontal,+parameters.input.outputStride);var poses=[pose];break;case"multi-pose":var poses=await net.estimateMultiplePoses(sourceEl,+parameters.input.imageScaleFactor,flipHorizontal,+parameters.input.outputStride,+parameters.multiPoseDetection.maxPoseDetections,+parameters.multiPoseDetection.minPartConfidence,+parameters.multiPoseDetection.nmsRadius);break;default:console.assert(false,`unknown algorithm ${parameters.algorithm}`)}return poses}const color="pink";const lineWidth=2;function toTuple({y:y,x:x}){return[y,x]}function drawSegment([ay,ax],[by,bx],color,scale,ctx){ctx.beginPath();ctx.moveTo(ax*scale,ay*scale);ctx.lineTo(bx*scale,by*scale);ctx.lineWidth=lineWidth;ctx.strokeStyle=color;ctx.stroke()}function drawSkeleton(keypoints,minConfidence,ctx,scale=1){const adjacentKeyPoints=posenet.getAdjacentKeyPoints(keypoints,minConfidence);adjacentKeyPoints.forEach(keypoints=>{drawSegment(toTuple(keypoints[0].position),toTuple(keypoints[1].position),color,scale,ctx)})}function drawKeypoints(keypoints,minConfidence,context,scale=1){context.font="12px Arial bolder";for(let i=0;i<keypoints.length;i++){const keypoint=keypoints[i];if(keypoint.score<minConfidence){continue}const{y:y,x:x}=keypoint.position;context.beginPath();context.arc(x*scale,y*scale,3,0,2*Math.PI);context.fillStyle=color;context.fill();context.fillStyle="aqua";context.fillText(keypoint.part,x*scale+4,y*scale+2)}}async function setupCamera(){const videoEl=document.querySelector("#sourceVideo");videoEl.width=512;videoEl.height=512;const stream=await navigator.mediaDevices.getUserMedia({audio:false,video:{facingMode:"user",width:videoEl.width,height:videoEl.height}});videoEl.srcObject=stream;return new Promise(resolve=>{videoEl.onloadedmetadata=(()=>{videoEl.play();resolve(videoEl)})})}function isMobile(){function isAndroid(){return/Android/i.test(navigator.userAgent)}function isiOS(){return/iPhone|iPad|iPod/i.test(navigator.userAgent)}return isAndroid()||isiOS()}return{setupCamera:setupCamera,isMobile:isMobile,drawKeypoints:drawKeypoints,drawSkeleton:drawSkeleton,estimatePoses:estimatePoses}}();var Utils=mlPosenet$1.Utils;var mlPosenet$2=mlPosenet$2||{};mlPosenet$2.ResultsViewer=function(canvasEl){const canvasSize=640;canvasEl.width=canvasSize;canvasEl.height=canvasSize;const context=canvasEl.getContext("2d");this.update=function(poses,sourceEl,guiState,flipHorizontal){if(flipHorizontal===undefined){flipHorizontal=sourceEl instanceof HTMLVideoElement?true:false}context.clearRect(0,0,canvasSize,canvasSize);if(guiState.output.showVideo){context.save();if(flipHorizontal){context.scale(-1,1);context.translate(-canvasSize,0)}context.drawImage(sourceEl,0,0,canvasSize,canvasSize);context.restore()}poses.forEach(({score:score,keypoints:keypoints})=>{let minPoseConfidence=Number(guiState.singlePoseDetection.minPoseConfidence);let minPartConfidence=Number(guiState.singlePoseDetection.minPartConfidence);if(score<minPoseConfidence)return;const scale=canvasSize/sourceEl.width;if(guiState.output.showPoints){Utils.drawKeypoints(keypoints,minPartConfidence,context,scale)}if(guiState.output.showSkeleton){Utils.drawSkeleton(keypoints,minPartConfidence,context,scale)}})}};var ResultsViewer=mlPosenet$2.ResultsViewer;var mlPosenet$3=mlPosenet$3||{};mlPosenet$3.createDatGUI=function(guiState){const gui=new dat.GUI({width:300});const algorithmController=gui.add(guiState,"algorithm",["single-pose","multi-pose"]);let input=gui.addFolder("Input");const architectureController=input.add(guiState.input,"mobileNetArchitecture",["1.01","1.00","0.75","0.50"]);input.add(guiState.input,"outputStride",[8,16,32]);input.add(guiState.input,"imageScaleFactor").min(.2).max(1);input.open();let single=gui.addFolder("Single Pose Detection");single.add(guiState.singlePoseDetection,"minPoseConfidence",0,1);single.add(guiState.singlePoseDetection,"minPartConfidence",0,1);single.open();let multi=gui.addFolder("Multi Pose Detection");multi.add(guiState.multiPoseDetection,"maxPoseDetections").min(1).max(20).step(1);multi.add(guiState.multiPoseDetection,"minPoseConfidence",0,1);multi.add(guiState.multiPoseDetection,"minPartConfidence",0,1);multi.add(guiState.multiPoseDetection,"nmsRadius").min(0).max(40);let output=gui.addFolder("Output");output.add(guiState.output,"showVideo");output.add(guiState.output,"showSkeleton");output.add(guiState.output,"showPoints");output.open();architectureController.onChange(function(architecture){guiState.changeToArchitecture=architecture});algorithmController.onChange(function(value){switch(guiState.algorithm){case"single-pose":multi.close();single.open();break;case"multi-pose":single.close();multi.open();break}})};var createDatGUI=mlPosenet$3.createDatGUI;var index={Parameters:Parameters,Utils:Utils,ResultsViewer:ResultsViewer,createDatGUI:createDatGUI};return index});